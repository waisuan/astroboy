// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chat/history.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "astroboy/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHistory is a mock of IHistory interface.
type MockIHistory struct {
	ctrl     *gomock.Controller
	recorder *MockIHistoryMockRecorder
}

// MockIHistoryMockRecorder is the mock recorder for MockIHistory.
type MockIHistoryMockRecorder struct {
	mock *MockIHistory
}

// NewMockIHistory creates a new mock instance.
func NewMockIHistory(ctrl *gomock.Controller) *MockIHistory {
	mock := &MockIHistory{ctrl: ctrl}
	mock.recorder = &MockIHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHistory) EXPECT() *MockIHistoryMockRecorder {
	return m.recorder
}

// AddChatMessage mocks base method.
func (m *MockIHistory) AddChatMessage(userId string, chatMsg *model.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatMessage", userId, chatMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChatMessage indicates an expected call of AddChatMessage.
func (mr *MockIHistoryMockRecorder) AddChatMessage(userId, chatMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatMessage", reflect.TypeOf((*MockIHistory)(nil).AddChatMessage), userId, chatMsg)
}

// ForUser mocks base method.
func (m *MockIHistory) ForUser(userId string) ([]model.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForUser", userId)
	ret0, _ := ret[0].([]model.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForUser indicates an expected call of ForUser.
func (mr *MockIHistoryMockRecorder) ForUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForUser", reflect.TypeOf((*MockIHistory)(nil).ForUser), userId)
}
